//#include <opencv2/opencv.hpp>
//#include<opencv2\core.hpp>
//#include<opencv2\highgui.hpp>
//#include <opencv2/imgproc.hpp>
//#include <vector>
//#include <iostream>
//#include <stdlib.h>
//#include <stdio.h>
//#include <numeric>
//
//using namespace std;
//using namespace cv;
//
////—оздание глобальных переменных дл€ операции эрозии
//IplImage* image = 0;
//IplImage* dst = 0;
//IplImage* Erode = 0;
//IplImage* open = 0;
//IplImage* Temp = 0;
//
//int radius = 1;
//int radius_max = 10;
//
//int iterations = 1;
//int iterations_max = 10;
////
//
//void show_vector(vector<int>&vecvh, vector<int>&vecvv)
//{
//	for (vector<int>::iterator it = vecvh.begin(); it != vecvh.end(); ++it)
//		cout << "vh: " << *it << endl;
//	for (vector<int>::iterator it = vecvv.begin(); it != vecvv.end(); ++it)
//		cout << "vv: " << *it << endl;
//}
//
//int main(int argc, char** argv)
//{
//
//	Mat vhimage = imread("Visual_Cargo_x1601_y7784_vh.TIF", CV_LOAD_IMAGE_GRAYSCALE); // vh - многопол€ризованное изображение; vv - однопол€ризованное.
//	Mat vvimage = imread("Visual_Cargo_x1601_y7784_vv.TIF", CV_LOAD_IMAGE_GRAYSCALE);
//
//	ofstream file1;
//	file1.open("average.txt");//среднее арифметическое уровн€ шума фона
//	ofstream file2;
//	file2.open("SKO.txt"); //среднеквадратичное отклонение уровн€ шума фона
//
//	int VH_sum = 0;
//	int VH_sumpix = 0;
//	int VH_z = 0; // область корабл€
//
//	for (int i = 0; i < vhimage.rows; i = i + 2)
//	{
//		for (int j = 0; j < vhimage.cols; j = j + 2)
//		{
//			int A = (int)vhimage.at<uchar>(i, j);
//			if ((i > (vhimage.rows / 3)) && (i < (vhimage.rows * 2 / 3)) && (j > (vhimage.cols / 3)) && (j < (vhimage.cols * 2 / 3)))
//			{
//				VH_z = VH_z + 4;
//			}
//			else
//			{
//				VH_sumpix = VH_sumpix + A;
//				VH_sum++;
//			}
//		}
//	}
//	int VH_M = VH_sumpix / VH_sum;
//	file1 << "VH: " << VH_M << endl;
//
//	double A_SKO = 0;
//	for (int i = 0; i < vhimage.rows; i = i + 2)
//	{
//		for (int j = 0; j < vhimage.cols; j = j + 2)
//		{
//			int A = (int)vhimage.at<uchar>(i, j);
//			if ((i > (vhimage.rows / 3)) && (i < (vhimage.rows * 2 / 3)) && (j > (vhimage.cols / 3)) && (j < (vhimage.cols * 2 / 3)))
//			{
//				VH_z = VH_z + 4;
//			}
//			else
//			{
//				A_SKO = A_SKO + (pow((A - VH_M), 2));
//			}
//		}
//	}
//	double VH_SKO = int(sqrt(A_SKO / (VH_sum - 1)));
//	file2 << "VH: " << VH_SKO << endl;
//
//	cout << "Ship area VH: " << int(VH_z / 2) << endl;
//
//	int VV_sum = 0;
//	int VV_sumpix = 0;
//	int VV_z = 0;
//
//	for (int i = 0; i < vvimage.rows; i = i + 2)
//	{
//		for (int j = 0; j < vvimage.cols; j = j + 2)
//		{
//			int B = (int)vvimage.at<uchar>(i, j);
//			if ((i > (vvimage.rows / 3)) && (i < (vvimage.rows * 2 / 3)) && (j > (vvimage.cols / 3)) && (j < (vvimage.cols * 2 / 3)))
//			{
//				VV_z = VV_z + 4;
//			}
//			else
//			{
//				VV_sumpix = VV_sumpix + B;
//				VV_sum++;
//			}
//		}
//	}
//	int VV_M = VV_sumpix / VV_sum;
//	file1 << "VV: " << VV_M;
//
//	double B_SKO = 0;
//	for (int i = 0; i < vvimage.rows; i = i + 2)
//	{
//		for (int j = 0; j < vvimage.cols; j = j + 2)
//		{
//			int B = (int)vvimage.at<uchar>(i, j);
//			if ((i > (vvimage.rows / 3)) && (i < (vvimage.rows * 2 / 3)) && (j > (vvimage.cols / 3)) && (j < (vvimage.cols * 2 / 3)))
//			{
//				VV_z = VV_z + 4;;
//			}
//			else
//			{
//				B_SKO = B_SKO + (pow((B - VV_M), 2));
//			}
//		}
//	}
//	int VV_SKO = int(sqrt(B_SKO / (VV_sum - 1)));
//	file2 << "VV: " << VV_SKO;
//
//	cout << "Ship area VV: " << int(VV_z / 2) << endl;
//
//	file1.close();
//	file2.close();
//
//	//ќбнаружение пикселей корабл€ и их 8 соседей на изображении vh
//	int min_i = 10000;
//	int max_i = 0;
//	int min_j = 10000;
//	int max_j = 0;
//
//	for (int i = 1; i < vhimage.rows - 1; i++)
//	{
//		for (int j = 1; j < vhimage.cols - 1; j++)
//		{
//			int A = vhimage.at<uchar>(i, j);
//			if (A >= 38)
//			{
//				if (vhimage.at<uchar>(i - 1, j) >= (VH_M + 3 * VH_SKO))
//				{
//					if (vhimage.at<uchar>(i + 1, j) >= (VH_M + 3 * VH_SKO))
//					{
//						if (vhimage.at<uchar>(i, j - 1) >= (VH_M + 3 * VH_SKO))
//						{
//							if (vhimage.at<uchar>(i, j + 1) >= (VH_M + 3 * VH_SKO))
//							{
//								if (vhimage.at<uchar>(i + 1, j - 1) >= (VH_M + 3 * VH_SKO))
//								{
//									if (vhimage.at<uchar>(i + 1, j + 1) >= (VH_M + 3 * VH_SKO))
//									{
//										if (vhimage.at<uchar>(i - 1, j + 1) >= (VH_M + 3 * VH_SKO))
//										{
//											if (vhimage.at<uchar>(i - 1, j - 1) >= (VH_M + 3 * VH_SKO))
//											{
//												if (vhimage.at<uchar>(i, j) >= (VH_M + 5 * VH_SKO))
//												{
//													if (min_i > i) min_i = i;
//													if (max_i < i) max_i = i;
//													if (min_j > j) min_j = j;
//													if (max_j < j) max_j = j;
//												}
//											}
//										}
//									}
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//	}
//
//	Mat OutImgVH;
//	vhimage.copyTo(OutImgVH);
//
//	vector<int> vecvh;
//
//	for (int i = min_i; i < max_i; i++)
//	{
//		for (int j = min_j; j < max_j; j++)
//		{
//			if (vhimage.at<uchar>(i, j) < (VH_M + 5 * VH_SKO))
//			{
//				OutImgVH.at<uchar>(i, j) = 0;
//			}
//			else
//			{
//				vecvh.push_back(vhimage.at<uchar>(i, j));
//				OutImgVH.at<uchar>(i, j) = 255;
//			}
//		}
//	}
//
//	for (int i = 0; i < vhimage.rows; i++)
//	{
//		for (int j = 0; j < vhimage.cols; j++)
//		{
//			if (i > min_i && i < max_i && j > min_j && j < max_j)
//			{
//				if (vhimage.at<uchar>(i, j) >= (VH_M + 5 * VH_SKO))
//				{
//					OutImgVH.at<uchar>(i, j) = 255;
//				}
//			}
//			else
//			{
//				OutImgVH.at<uchar>(i, j) = 0;
//			}
//		}
//	}
//	/*int MaxLenghtVH = vecvh.size();
//	cout << "MaxLenghtVH: " << MaxLenghtVH << endl;*/
//
//	//ќбнаружение пикселей корабл€ и их 8 соседей на изображении vv
//	for (int i = 1; i < vvimage.rows - 1; i++)
//	{
//		for (int j = 1; j < vvimage.cols - 1; j++)
//		{
//			int B = vvimage.at<uchar>(i, j);
//			if (B >= 30)
//			{
//				if (vvimage.at<uchar>(i - 1, j) >= (VV_M + 3 * VV_SKO))
//				{
//					if (vvimage.at<uchar>(i + 1, j) >= (VV_M + 3 * VV_SKO))
//					{
//						if (vvimage.at<uchar>(i, j - 1) >= (VV_M + 3 * VV_SKO))
//						{
//							if (vvimage.at<uchar>(i, j + 1) >= (VV_M + 3 * VV_SKO))
//							{
//								if (vvimage.at<uchar>(i + 1, j - 1) >= (VV_M + 3 * VV_SKO))
//								{
//									if (vvimage.at<uchar>(i + 1, j + 1) >= (VV_M + 3 * VV_SKO))
//									{
//										if (vvimage.at<uchar>(i - 1, j + 1) >= (VV_M + 3 * VV_SKO))
//										{
//											if (vvimage.at<uchar>(i - 1, j - 1) >= (VV_M + 3 * VV_SKO))
//											{
//												if (vvimage.at<uchar>(i, j) >= (VV_M + 5 * VV_SKO))
//												{
//													if (min_i > i) min_i = i;
//													if (max_i < i) max_i = i;
//													if (min_j > j) min_j = j;
//													if (max_j < j) max_j = j;
//												}
//											}
//										}
//									}
//								}
//							}
//						}
//					}
//				}
//			}
//		}
//	}
//
//	Mat OutImgVV;
//	vvimage.copyTo(OutImgVV);
//
//	vector<int> vecvv;
//
//
//	for (int i = min_i; i < max_i; i++)
//	{
//		for (int j = min_j; j < max_j; j++)
//		{
//			if (vvimage.at<uchar>(i, j) < (VV_M + 5 * VV_SKO))
//			{
//				OutImgVV.at<uchar>(i, j) = 0;
//			}
//			else
//			{
//				vecvv.push_back(vvimage.at<uchar>(i, j));
//				OutImgVV.at<uchar>(i, j) = 255;
//			}
//		}
//	}
//
//	for (int i = 0; i < vvimage.rows; i++)
//	{
//		for (int j = 0; j < vvimage.cols; j++)
//		{
//			if (i > min_i && i < max_i && j > min_j && j < max_j)
//			{
//				if (vvimage.at<uchar>(i, j) >= (VV_M + 5 * VV_SKO))
//				{
//					OutImgVV.at<uchar>(i, j) = 255;
//				}
//			}
//			else
//			{
//				OutImgVV.at<uchar>(i, j) = 0;
//			}
//		}
//	}
//	/*int MaxLenghtVV = vecvv.size();
//	cout << "MaxLenghtVV: " << MaxLenghtVV << endl;*/
//
//	// ƒл€ включение тех пикслей, что были обнаружены на одном изображении, но не были на другом. 
//	for (int i = min_i; i < max_i; i++)
//	{
//		for (int j = min_j; j < max_j; j++)
//		{
//			if (vvimage.at<uchar>(i, j) < (VV_M + 5 * VV_SKO) && vhimage.at<uchar>(i, j) >= (VH_M + 5 * VH_SKO))
//			{
//				vecvv.push_back(vvimage.at<uchar>(i, j));
//				OutImgVV.at<uchar>(i, j) = 255;
//			}
//
//			if (vvimage.at<uchar>(i, j) >= (VV_M + 5 * VV_SKO) && vhimage.at<uchar>(i, j) < (VH_M + 5 * VH_SKO))
//			{
//				vecvh.push_back(vhimage.at<uchar>(i, j));
//				OutImgVH.at<uchar>(i, j) = 255;
//			}
//		}
//	}
//
//	show_vector(vecvh, vecvv);
//
//	cvNamedWindow("CFAR-out-vh", CV_WINDOW_NORMAL);
//	imshow("CFAR-out-vh", OutImgVH);
//
//	cvNamedWindow("CFAR-out-vv", CV_WINDOW_NORMAL);
//	imshow("CFAR-out-vv", OutImgVV);
//
//	cvNamedWindow("CFAR-VH", CV_WINDOW_NORMAL);
//	imshow("CFAR-VH", vhimage);
//
//	cvNamedWindow("CFAR-VV", CV_WINDOW_NORMAL);
//	imshow("CFAR-VV", vvimage);
//
//	imwrite("CFAR-out-vh.tif", OutImgVH);
//
//	// Ќаходим среднее арифметическое и медианное значени€ пикселей корабл€ дл€ создани€ порога - сохранени€ пикселей более высоких значений.
//	int M = accumulate(vecvh.begin(), vecvh.end(), 0.0) / vecvh.size();
//	/*int M = accumulate(vecvv.begin(), vecvv.end(), 0.0) / vecvv.size();*/
//	cout << "M: " << M << endl;
//
//	/*int B = vecvv.front();
//	int C = vecvv.back();*/
//	int B = vecvh.front();
//	int C = vecvh.back();
//	int Median = abs((B - C) / 2);
//	cout << "median: " << Median << endl;
//
//	//«аносим в порог большее значение из среднего и медианного 
//	int K;
//	if (Median <= M)
//	{
//		K = M;
//	}
//	else
//	{
//		K = Median;
//	}
//
//	const char* filename = argc == 2 ? argv[1] : "CFAR-out-vh.tif";
//
//	image = cvLoadImage(filename, 0);
//
//	Erode = cvCloneImage(image);
//
//	while (1)
//	{
//
//		cvNamedWindow("erode", CV_WINDOW_NORMAL);
//
//		// создаЄм €дро
//		IplConvKernel* Kern = cvCreateStructuringElementEx(radius * 2, radius * 2, radius, radius, CV_SHAPE_RECT);
//
//		// выполн€ем эрозию
//		cvErode(image, Erode, Kern, iterations);
//
//		cvShowImage("erode", Erode);
//
//		cvReleaseStructuringElement(&Kern);
//
//		dst = cvCreateImage(cvSize(Erode->width, Erode->height), IPL_DEPTH_8U, 1);
//
//		// —оздаем порог
//		cvThreshold(Erode, dst, K, 255, CV_THRESH_BINARY);
//
//		cvNamedWindow("cvThreshold", CV_WINDOW_NORMAL);
//		cvShowImage("cvThreshold", dst);
//
//		char c = cvWaitKey(33);
//		if (c == 27)
//		{
//			break;
//		}
//	}
//
//	cvReleaseImage(&image);
//	cvReleaseImage(&Erode);
//	cvReleaseImage(&dst);
//
//	// ѕоворот на главную ось
//	/*Mat_<uchar> dst;
//	Mat_<float> covar, M;
//
//	calcCovarMatrix(dst, covar, M, CV_COVAR_SCRAMBLED);
//	cout << "\nMean\n" << mean << "\nCovar\n" << covar << endl;*/
//
//	//open = cvCloneImage(image);
//
//	//while (1) 
//	//{
//	//	cvNamedWindow("CV_MOP_OPEN", CV_WINDOW_NORMAL);
//	//	// показываем картинку
//	//	cvShowImage("original", image);
//
//	//	// создаЄм €дро
//	//	IplConvKernel* Kern = cvCreateStructuringElementEx(radius * 2 + 1, radius * 2 + 1, radius, radius, CV_SHAPE_RECT);
//
//	//	// картинка дл€ промежуточного хранени€ результатов cvCreateImage
//	//	
//	//	Temp = cvCreateImage(cvSize(image->width, image->height), IPL_DEPTH_8U, 1);
//	//	// выолн€ем преобразовани€
//	//	cvMorphologyEx(image, open, Temp, Kern, CV_MOP_OPEN, iterations);
//
//	//	// показываем результат
//	//	cvShowImage("CV_MOP_OPEN", open);
//
//	//	cvReleaseStructuringElement(&Kern);
//	//	cvReleaseImage(&Temp);
//
//	//	char c = cvWaitKey(33);
//	//	if (c == 27) 
//	//	{
//	//		break;
//	//	}
//	//}
//
//	//// освобождаем ресурсы
//	//cvReleaseImage(&image);
//	//cvReleaseImage(&open);
//
//	cvWaitKey();
//	cvDestroyAllWindows;
//
//	return 0;
//}	unsigned char Mat0[121] =
	//{
	//0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
	//};
	//Mat element_0 = Mat(Size(11, 11), CV_8UC1, Mat0);

	//unsigned char Mat5[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_5 = Mat(Size(11, 11), CV_8UC1, Mat5);

	//unsigned char Mat10[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_10 = Mat(Size(11, 11), CV_8UC1, Mat10);

	//unsigned char Mat15[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_15 = Mat(Size(11, 11), CV_8UC1, Mat15);

	//unsigned char Mat20[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_20 = Mat(Size(11, 11), CV_8UC1, Mat20);

	//unsigned char Mat25[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_25 = Mat(Size(11, 11), CV_8UC1, Mat25);

	//unsigned char Mat30[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_30 = Mat(Size(11, 11), CV_8UC1, Mat30);

	//unsigned char Mat35[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_35 = Mat(Size(11, 11), CV_8UC1, Mat35);

	//unsigned char Mat40[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_40 = Mat(Size(11, 11), CV_8UC1, Mat40);

	//unsigned char Mat45[25] =
	//{
	//	0, 0, 0, 0, 1,
	//	0, 0, 0, 1, 0,
	//	0, 0, 1, 0, 0,
	//	0, 1, 0, 0, 0,
	//	1, 0, 0, 0, 0
	//};
	//Mat element_45 = Mat(Size(5, 5), CV_8UC1, Mat45);

	//unsigned char Mat50[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_50 = Mat(Size(11, 11), CV_8UC1, Mat50);

	//unsigned char Mat55[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_55 = Mat(Size(11, 11), CV_8UC1, Mat55);

	//unsigned char Mat60[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_60 = Mat(Size(11, 11), CV_8UC1, Mat60);

	//unsigned char Mat65[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
	//	0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
	//	0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_65 = Mat(Size(11, 11), CV_8UC1, Mat65);

	//unsigned char Mat70[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_70 = Mat(Size(11, 11), CV_8UC1, Mat70);

	//unsigned char Mat75[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,
	//	0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
	//	0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_75 = Mat(Size(11, 11), CV_8UC1, Mat75);

	//unsigned char Mat80[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
	//	0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
	//	1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_80 = Mat(Size(11, 11), CV_8UC1, Mat80);

	//unsigned char Mat85[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_85 = Mat(Size(11, 11), CV_8UC1, Mat85);

	//unsigned char Mat90[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_90 = Mat(Size(11, 11), CV_8UC1, Mat90);

	//unsigned char Mat95[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_95 = Mat(Size(11, 11), CV_8UC1, Mat95);

	//unsigned char Mat100[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_100 = Mat(Size(11, 11), CV_8UC1, Mat100);

	//unsigned char Mat105[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_105 = Mat(Size(11, 11), CV_8UC1, Mat105);

	//unsigned char Mat110[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_110 = Mat(Size(11, 11), CV_8UC1, Mat110);

	//unsigned char Mat115[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_115 = Mat(Size(11, 11), CV_8UC1, Mat115);

	//unsigned char Mat120[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_120 = Mat(Size(11, 11), CV_8UC1, Mat120);

	//unsigned char Mat125[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_125 = Mat(Size(11, 11), CV_8UC1, Mat125);

	//unsigned char Mat130[121] =
	//{
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	//};
	//Mat element_130 = Mat(Size(11, 11), CV_8UC1, Mat130);

	//unsigned char Mat135[121] =
	//{
	//	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
	//};
	//Mat element_135 = Mat(Size(11, 11), CV_8UC1, Mat135);

	//unsigned char Mat140[121] =
	//{
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
	//};
	//Mat element_140 = Mat(Size(11, 11), CV_8UC1, Mat140);

	//unsigned char Mat145[121] =
	//{
	//	0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
	//};
	//Mat element_145 = Mat(Size(11, 11), CV_8UC1, Mat145);

	//unsigned char Mat150[121] =
	//{
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0
	//};
	//Mat element_150 = Mat(Size(11, 11), CV_8UC1, Mat150);

	//unsigned char Mat155[121] =
	//{
	//	0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0
	//};
	//Mat element_155 = Mat(Size(11, 11), CV_8UC1, Mat155);

	//unsigned char Mat160[121] =
	//{
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
	//};
	//Mat element_160 = Mat(Size(11, 11), CV_8UC1, Mat160);

	//unsigned char Mat165[121] =
	//{
	//	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
	//};
	//Mat element_165 = Mat(Size(11, 11), CV_8UC1, Mat165);

	//unsigned char Mat170[121] =
	//{
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
	//};
	//Mat element_170 = Mat(Size(11, 11), CV_8UC1, Mat170);

	//unsigned char Mat175[121] =
	//{ (
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	//	0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
	//) };
	//Mat element_175 = Mat(Size(11, 11), CV_8UC1, Mat175);